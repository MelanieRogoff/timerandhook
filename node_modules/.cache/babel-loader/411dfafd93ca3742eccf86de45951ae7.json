{"ast":null,"code":"import { useState, useEffect } from 'react'; //this hook captures the height & width of the viewport\n\nfunction getWindowDimension() {\n  //when you console.log(window), you see that these are included\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window; //deconstructing the window object\n\n  return {\n    width,\n    height\n  }; //and returning the values\n}\n\nexport default function useViewport() {\n  const [useDimensions, setWindowDimensions] = useState(getWindowDimension);\n  useEffect(() => {\n    function handleResize() {\n      //we want the values to change as soon as they change\n      setWindowDimensions(getWindowDimension());\n    }\n\n    window.addEventListener('resize', handleResize); //anytime resize event happens, it'll call handleResize \n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return useDimensions;\n}","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/practicer/src/hook/Viewport.js"],"names":["useState","useEffect","getWindowDimension","innerWidth","width","innerHeight","height","window","useViewport","useDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAGA;;AAEA,SAASC,kBAAT,GAA8B;AAC1B;AACA,QAAM;AAACC,IAAAA,UAAU,EAAEC,KAAb;AAAoBC,IAAAA,WAAW,EAAEC;AAAjC,MAA2CC,MAAjD,CAF0B,CAE+B;;AACrD,SAAO;AAAEH,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP,CAHsB,CAGI;AACjC;;AAED,eAAe,SAASE,WAAT,GAAuB;AAClC,QAAM,CAACC,aAAD,EAAgBC,mBAAhB,IAAuCV,QAAQ,CAACE,kBAAD,CAArD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASU,YAAT,GAAwB;AAAC;AACrBD,MAAAA,mBAAmB,CAACR,kBAAkB,EAAnB,CAAnB;AACH;;AAEDK,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC,EALY,CAKqC;;AACjD,WAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACH,GAPQ,EAON,EAPM,CAAT;AASA,SAAOF,aAAP;AACH","sourcesContent":["import { useState, useEffect } from 'react';\n\n\n//this hook captures the height & width of the viewport\n\nfunction getWindowDimension() {\n    //when you console.log(window), you see that these are included\n    const {innerWidth: width, innerHeight: height} = window; //deconstructing the window object\n        return { width, height }; //and returning the values\n}\n\nexport default function useViewport() {\n    const [useDimensions, setWindowDimensions] = useState(getWindowDimension);\n\n    useEffect(() => {\n        function handleResize() {//we want the values to change as soon as they change\n            setWindowDimensions(getWindowDimension());\n        }    \n\n        window.addEventListener('resize', handleResize); //anytime resize event happens, it'll call handleResize \n        return () => window.removeEventListener('resize', handleResize);\n    }, [])\n\n    return useDimensions;\n}"]},"metadata":{},"sourceType":"module"}