{"ast":null,"code":"var _jsxFileName = \"/Users/melanierogoff/Desktop/practicer/src/Box.js\";\nimport React, { useState, useEffect } from 'react';\nimport useViewport from './hook/Viewport';\n\nconst Box = () => {\n  const [count, setCount] = useState(0); //setting up the state for the counter\n\n  const {\n    width,\n    height\n  } = useViewport();\n\n  const handleIncrement = () => setCount(count + 1); //incrementing timer\n\n\n  const handleDecrement = () => setCount(count - 1); //decrementing timer\n\n\n  const clearCount = () => setCount(0); //resetting timer\n\n\n  useEffect(() => {\n    document.title = count; //this sets the title of the document to whatever count is\n  }, [count]); //adding count here as a dependency\n  //If we don't have a dependency (in brackets) listed, this will run everytime the component re-renders. If we only want the effect to run under certain circumstances, we enter a dependency. This one, [count], means it only runs when count changes.\n  //Dependencies can help us avoid infinite loops or too many re-renders.\n  //When we have an empty dependency [], it'll only run useEffect once. ALWAYS HAVE AN ARRAY IN useEffect.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, count), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleIncrement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Increment\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDecrement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Decrement\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Reset Timer\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"The current screen size is \", width, \" by \", height), //ternary operator\n  count >= 0 //if count is more than or equal to 0\n  ?\n  /*#__PURE__*/\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  }, \"Count is more than 0 \") //render this p tag\n  :\n  /*#__PURE__*/\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, \"Count is less than 0\") //otherwise, do the opposite\n  );\n};\n\nexport default Box;","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/practicer/src/Box.js"],"names":["React","useState","useEffect","useViewport","Box","count","setCount","width","height","handleIncrement","handleDecrement","clearCount","document","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,iBAAxB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAEd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAD,CAAlC,CAFc,CAEyB;;AACvC,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBL,WAAW,EAApC;;AACA,QAAMM,eAAe,GAAG,MAAMH,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAtC,CAJc,CAIqC;;;AACnD,QAAMK,eAAe,GAAG,MAAMJ,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAtC,CALc,CAKqC;;;AACnD,QAAMM,UAAU,GAAG,MAAML,QAAQ,CAAC,CAAD,CAAjC,CANc,CAMwB;;;AAEtCJ,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,QAAQ,CAACC,KAAT,GAAeR,KAAf,CADY,CACU;AACzB,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CARc,CAUD;AAEb;AAEA;AAEA;;AAGA,sBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CADJ,oBAEI;AAAQ,IAAA,OAAO,EAAEI,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,eAGI;AAAQ,IAAA,OAAO,EAAEC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,eAII;AAAQ,IAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA+BJ,KAA/B,UAA0CC,MAA1C,CALJ,EAMM;AACEH,EAAAA,KAAK,IAAI,CAAT,CAAW;AAAX;AAAA;AACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADN,CACmC;AADnC;AAAA;AAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATd,CAS0C;AAT1C,GADJ;AAqBH,CAxCD;;AA0CA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useViewport from './hook/Viewport';\n\nconst Box = () => {\n\n    const [count, setCount] = useState(0); //setting up the state for the counter\n    const { width, height} = useViewport(); \n    const handleIncrement = () => setCount(count + 1); //incrementing timer\n    const handleDecrement = () => setCount(count - 1); //decrementing timer\n    const clearCount = () => setCount(0); //resetting timer\n\n    useEffect(() => {\n        document.title=count; //this sets the title of the document to whatever count is\n    }, [count]); //adding count here as a dependency\n    \n    //If we don't have a dependency (in brackets) listed, this will run everytime the component re-renders. If we only want the effect to run under certain circumstances, we enter a dependency. This one, [count], means it only runs when count changes.\n    \n    //Dependencies can help us avoid infinite loops or too many re-renders.\n    \n    //When we have an empty dependency [], it'll only run useEffect once. ALWAYS HAVE AN ARRAY IN useEffect.\n\n\n    return (\n        <>\n            <p>{count}</p> {/* {count}  is how we access the 0 from the useState */}\n            <button onClick={handleIncrement}>Increment</button>\n            <button onClick={handleDecrement}>Decrement</button>\n            <button onClick={clearCount}>Reset Timer</button>\n            <p>The current screen size is {width} by {height}</p>\n            { //ternary operator\n                count >= 0 //if count is more than or equal to 0\n                    ? <p>Count is more than 0 </p> //render this p tag\n                    : <p>Count is less than 0</p> //otherwise, do the opposite\n            }\n\n            {/* {\n                count >= 0 && \n                //FOR WHEN WE DON'T NEED AN ELSE. &&=SHORT CIRCUIT. IT'S AN OPERATOR FOR 'AND'.  */\n            //    <p>Count is more than 0</p>\n             //THIS ENTIRE  IF COUNT >=0 IS TRUE AND <p>count is more than 0</p> IS TRUE, THEN RUN. p tags and other tags are always true.\n             }\n        </>\n    )\n}\n\nexport default Box; "]},"metadata":{},"sourceType":"module"}