{"ast":null,"code":"var _jsxFileName = \"/Users/melanierogoff/Desktop/practicer/src/Box.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst Box = () => {\n  const [count, setCount] = useState(0); //setting up the state for the counter\n\n  const handleIncrement = () => setCount(count + 1); //incrementing timer\n\n\n  const handleDecrement = () => setCount(count - 1); //decrementing timer\n\n\n  const clearCount = () => setCount(0); //resetting timer\n\n\n  useEffect(() => {\n    document.title = count; //this sets the title of the document to whatever count is\n  }, [count]); //adding count here as a dependency\n  //If we don't have a dependency (in brackets) listed, this will run everytime the component re-renders. If we only want the effect to run under certain circumstances, we enter a dependency. This one, [count], means it only runs when count changes.\n  //the dependencies can help us avoid infinite loops or too many re-renders\n  //when we have an empty dependency [], it'll only run useEffect once. ALWAYS HAVE AN ARRAY IN USEEFFECT.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, count), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleIncrement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, \"Increment\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDecrement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \"Decrement\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, \"Reset Timer\"), //ternary operator\n  count >= 0 //if count is more than or equal to 0\n  ?\n  /*#__PURE__*/\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 23\n    }\n  }, \"Count is more than 0 \") //render this p tag\n  :\n  /*#__PURE__*/\n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }\n  }, \"Count is less than 0\") //otherwise, do the opposite\n  , count >= 0 &&\n  /*#__PURE__*/\n  //this is a short circuit, which means that if count is more than 0, it'll only create this p tag. THIS IS FOR WHEN WE DON'T NEED AN ELSE. \n  //&& IS A SHORT CIRCUIT. IT IS AN OPERATOR FOR 'AND'. \n  //THIS SAYS IF COUNT >=0 IS TRUE && <p>Count is more than 0</p> \n  React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, \"Count is more than 0\"));\n};\n\nexport default Box;","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/practicer/src/Box.js"],"names":["React","useState","useEffect","Box","count","setCount","handleIncrement","handleDecrement","clearCount","document","title"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAEd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC,CAFc,CAEyB;;AAEvC,QAAMK,eAAe,GAAG,MAAMD,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAtC,CAJc,CAIqC;;;AACnD,QAAMG,eAAe,GAAG,MAAMF,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAtC,CALc,CAKqC;;;AACnD,QAAMI,UAAU,GAAG,MAAMH,QAAQ,CAAC,CAAD,CAAjC,CANc,CAMwB;;;AAEtCH,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACC,KAAT,GAAeN,KAAf,CADY,CACU;AACzB,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CARc,CAUD;AACb;AACA;AACA;;AAGA,sBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CADJ,oBAEI;AAAQ,IAAA,OAAO,EAAEE,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,eAGI;AAAQ,IAAA,OAAO,EAAEC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,eAII;AAAQ,IAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJJ,EAMM;AACEJ,EAAAA,KAAK,IAAI,CAAT,CAAW;AAAX;AAAA;AACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADN,CACmC;AADnC;AAAA;AAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATd,CAS0C;AAT1C,IAaQA,KAAK,IAAI,CAAT;AAAA;AAAc;AACd;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAhBR,CADJ;AAqBH,CArCD;;AAuCA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Box = () => {\n\n    const [count, setCount] = useState(0); //setting up the state for the counter\n\n    const handleIncrement = () => setCount(count + 1); //incrementing timer\n    const handleDecrement = () => setCount(count - 1); //decrementing timer\n    const clearCount = () => setCount(0); //resetting timer\n\n    useEffect(() => {\n        document.title=count; //this sets the title of the document to whatever count is\n    }, [count]); //adding count here as a dependency\n    //If we don't have a dependency (in brackets) listed, this will run everytime the component re-renders. If we only want the effect to run under certain circumstances, we enter a dependency. This one, [count], means it only runs when count changes.\n    //the dependencies can help us avoid infinite loops or too many re-renders\n    //when we have an empty dependency [], it'll only run useEffect once. ALWAYS HAVE AN ARRAY IN USEEFFECT.\n\n\n    return (\n        <>\n            <p>{count}</p> {/* {count}  is how we access the 0 from the useState */}\n            <button onClick={handleIncrement}>Increment</button>\n            <button onClick={handleDecrement}>Decrement</button>\n            <button onClick={clearCount}>Reset Timer</button>\n\n            { //ternary operator\n                count >= 0 //if count is more than or equal to 0\n                    ? <p>Count is more than 0 </p> //render this p tag\n                    : <p>Count is less than 0</p> //otherwise, do the opposite\n            }\n\n            {\n                count >= 0 && //this is a short circuit, which means that if count is more than 0, it'll only create this p tag. THIS IS FOR WHEN WE DON'T NEED AN ELSE. \n                //&& IS A SHORT CIRCUIT. IT IS AN OPERATOR FOR 'AND'. \n                //THIS SAYS IF COUNT >=0 IS TRUE && <p>Count is more than 0</p> \n                <p>Count is more than 0</p>\n            }\n        </>\n    )\n}\n\nexport default Box; "]},"metadata":{},"sourceType":"module"}